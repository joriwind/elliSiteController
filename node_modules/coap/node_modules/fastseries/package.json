{
  "name": "fastseries",
  "version": "1.3.0",
  "description": "Zero-overhead asynchronous series/each/map function calls",
  "main": "series.js",
  "scripts": {
    "lint": "standard",
    "test": "tape test.js | faucet"
  },
  "pre-commit": [
    "lint",
    "test"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/mcollina/fastseries.git"
  },
  "keywords": [
    "series",
    "fast",
    "async"
  ],
  "author": {
    "name": "Matteo Collina",
    "email": "hello@matteocollina.com"
  },
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/mcollina/fastseries/issues"
  },
  "homepage": "https://github.com/mcollina/fastseries",
  "devDependencies": {
    "async": "^0.9.0",
    "faucet": "0.0.1",
    "pre-commit": "^1.0.6",
    "standard": "^3.0.0",
    "tape": "^3.5.0"
  },
  "dependencies": {
    "xtend": "^4.0.0"
  },
  "readme": "# fastseries [![Build Status](https://travis-ci.org/mcollina/fastseries.svg?branch=master)](https://travis-ci.org/mcollina/fastseries)\n\nZero-overhead series function call for node.js. Also supports each\nand map!\n\nBenchmark for doing 3 calls `setImmediate` 1 million times:\n\n* non-reusable `setImmediate`: 5967ms\n* `async.series`: 9573ms\n* `async.eachSeries`: 6196ms\n* `async.mapSeries`: 8495ms\n* `fastseries` with results: 6231ms\n* `fastseries` without results: 6182ms\n* `fastseries` map: 6288ms\n* `fastseries` each: 6137ms\n\nThese benchmarks where taken via `bench.js` on iojs 1.8.1, on a MacBook\nPro Retina 2014.\n\nIf you need zero-overhead parallel function call, check out\n[fastparallel](http://npm.im/fastparallel).\n\n[![js-standard-style](https://raw.githubusercontent.com/feross/standard/master/badge.png)](https://github.com/feross/standard)\n\n## Example for series call\n\n```js\nvar series = require('fastseries')({\n  // this is a function that will be called\n  // when a series completes\n  released: completed,\n\n  // if you want the results, then here you are\n  results: true\n})\n\nseries(\n  {}, // what will be this in the functions\n  [something, something, something], // functions to call\n  42, // the first argument of the functions\n  done // the function to be called when the series ends\n)\n\nfunction late (arg, cb) {\n  console.log('finishing', arg)\n  cb(null, 'myresult-' + arg)\n}\n\nfunction something (arg, cb) {\n  setTimeout(late, 1000, arg, cb)\n}\n\nfunction done (err, results) {\n  console.log('series completed, results:', results)\n}\n\nfunction completed () {\n  console.log('series completed!')\n}\n```\n\n## Example for each and map calls\n\n```js\nvar series = require('fastseries')({\n  // this is a function that will be called\n  // when a series completes\n  released: completed,\n\n  // if you want the results, then here you are\n  // passing false disables map\n  results: true\n})\n\nseries(\n  {}, // what will be this in the functions\n  something, // functions to call\n  [1, 2, 3], // the first argument of the functions\n  done // the function to be called when the series ends\n)\n\nfunction late (arg, cb) {\n  console.log('finishing', arg)\n  cb(null, 'myresult-' + arg)\n}\n\nfunction something (arg, cb) {\n  setTimeout(late, 1000, arg, cb)\n}\n\nfunction done (err, results) {\n  console.log('series completed, results:', results)\n}\n\nfunction completed () {\n  console.log('series completed!')\n}\n\n```\n\n## Caveats\n\nThe `done` function will be called only once, even if more than one error happen.\n\nThis library works by caching the latest used function, so that running a new series\ndoes not cause **any memory allocations**.\n\n## License\n\nISC\n",
  "readmeFilename": "README.md",
  "_id": "fastseries@1.3.0",
  "_from": "fastseries@^1.1.0"
}
